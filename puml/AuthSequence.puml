@startuml Authentication Sequence Diagram

title "Authentication Sequence Diagram"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:auth" as auth
participant "<<middleware>>\n:auth" as middleware
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:auth" as controllerAuth
participant "<<model>>\n:user" as modelUser
participant "<<model>>\n:shopOwner" as modelUser
database "<<MongoDB>>\n:users" as userDatabase
database "<<MongoDB>>\n:shopowners" as userDatabase

client -> server ++ :req.post('auth/user/register')
server -> auth --++ :app.use('api/v1/auth',auth)
auth -> controllerAuth --++ :registerUser
controllerAuth -> modelUser ++ :create({ name, tel, email, password, role })
modelUser -> userDatabase ++ :UserSchema
userDatabase --> modelUser -- :user
controllerAuth <-- modelUser -- :user
controllerAuth -> client -- :response

client -> server ++ :req.post('auth/shop-owner/register')
server -> auth --++ :app.use('api/v1/auth', auth)
auth -> controllerAuth --++ :registerShopOwner
controllerAuth -> modelShopOwner ++ :create({ name, tel, email, password, role })
modelShopOwner -> shopOwnerDatabase ++ :ShopOwnerSchema
shopOwnerDatabase --> modelShopOwner -- :shopOwner
controllerAuth <-- modelShopOwner -- :shopOwner
controllerAuth -> client -- :response

client -> server ++ :req.post('auth/user/login')
server -> auth --++ :app.use('api/v1/auth', auth)
auth -> controllerAuth --++ :loginUser
controllerAuth -> modelUser ++ :findOne({ email })
modelUser -> userDatabase ++: UserSchema
userDatabase --> modelUser -- :user
controllerAuth <-- modelUser -- :user
controllerAuth -> client -- :response

client -> server ++ :req.post('auth/shop-owner/login')
server -> auth --++ :app.use('api/v1/auth', auth)
auth -> controllerAuth --++ :loginShopOwner
controllerAuth -> modelShopOwner ++ :findOne({ email })
modelShopOwner -> shopOwnerDatabase ++: ShopOwnerSchema
shopOwnerDatabase --> modelShopOwner -- :shopOwner
controllerAuth <-- modelShopOwner -- :shopOwner
controllerAuth -> client -- :response

client -> server ++ :req.get('auth/logout')
server -> auth --++ :app.use('api/v1/auth', auth)
auth -> controllerAuth --++ :logout
controllerAuth -> client -- :response

client -> server ++ :req.get('auth/me')
server -> auth --++ :app.use('api/v1/auth', auth)
auth -> middleware ++ :protect
middleware -> jwt ++ :verify(token, secret)
jwt --> middleware -- :decoded

alt User
  middleware -> modelUser ++ :findById(decoded.id)
  modelUser -> userDatabase ++ :find(_id: decoded.id)
  userDatabase --> modelUser -- :user
  modelUser --> middleware -- :req.user

else ShopOwner
  middleware -> modelShopOwner ++ :findById(decoded.id)
  modelShopOwner -> shopOwnerDatabase ++ :find(_id: decoded.id)
  shopOwnerDatabase --> modelShopOwner -- :shopOwner
  modelShopOwner --> middleware -- :req.user
end

middleware --> auth -- :next
auth -> controllerAuth --++ :getMe

alt User
  controllerAuth -> modelUser ++ :findById(user.id)
  modelUser -> userDatabase ++ :UserSchema
  userDatabase --> modelUser -- :user
  controllerAuth <-- modelUser -- :user
else ShopOwner
  controllerAuth -> modelShopOwner ++ :findById(shopOwner.id)
  modelShopOwner -> shopOwnerDatabase ++ :ShopOwnerSchema
  shopOwnerDatabase --> modelShopOwner -- :shopOwner
  controllerAuth <-- modelShopOwner -- :shopOwner
end

controllerAuth -> client -- :response

@enduml
